-- 1 List all actors

SELECT `first_name`, `last_name` FROM `actor`;

-- 2 Find the surname of the actor with the forename 'John'.

SELECT * FROM `actor` WHERE `first_name` = 'John';

-- 3 Find all actors with surname 'Neeson'.

SELECT * FROM `actor` WHERE `last_name` = 'Neeson';

-- 4 Find all actors with ID numbers divisible by 10.

SELECT * FROM `actor` WHERE (`actor_id` % 10 ) = 0;

-- 5 What is the description of the movie with an ID of 100?

SELECT `description` FROM `film` WHERE `film_id` = '100';

-- 6 Find every R-rated movie.

SELECT * FROM `film` WHERE `rating` = 'R';

-- 7 Find every non-R-rated movie.

SELECT * FROM `film` WHERE `rating` != 'R';

-- 8 Find the ten shortest movies.

SELECT * FROM `film` ORDER BY `length` ASC LIMIT 10;

--  9  Find the movies with the longest runtime, without using LIMIT.
-- so I was trying to work out how to do this as one and was having a mare sO i did this with 2 commands, working the max film length, then listing films with that length

SELECT MAX(`length`) FROM `film`;
SELECT * FROM `film` WHERE `length` = '185';

--  10  Find all movies that have deleted scenes.

SELECT * FROM `film` WHERE `special_features` LIKE '%deleted scenes%';

--   11 Using HAVING, reverse-alphabetically list the last names that are not repeated.
-- I left the first count(`last_name`) in just cause i wanted to confirm it was only names listed once :-) 

SELECT COUNT(`last_name`), `last_name` FROM `actor` GROUP BY `last_name` HAVING COUNT(`last_name`) <= 1 ORDER BY `last_name` DESC;

--   12 Using HAVING, list the last names that appear more than once, from highest to lowest frequency.

SELECT COUNT(`last_name`) AS `frequency_of_last_name`, `last_name` FROM `actor` GROUP BY `last_name` HAVING COUNT(`last_name`) > 1 ORDER BY `frequency_of_last_name` DESC;

--   13 Which actor has appeared in the most films?

SELECT `actor_id`, `first_name`, `last_name` FROM `actor` WHERE `actor_id` = (
SELECT `actor_id` FROM `film_actor` GROUP BY `actor_id` ORDER BY COUNT(`actor_id`) DESC LIMIT 1);

--   14 When is 'Academy Dinosaur' due?

--   15 What is the average runtime of all films?

SELECT AVG(`length`) FROM `film`;

--   16 List the average runtime for every film category.

-- group films into their categories
-- get average runtimes from these films

--   17 List all movies featuring a robot.

SELECT * FROM `film` WHERE `description` LIKE '%robot%';

--   18 How many movies were released in 2010?
-- theres no movies that come out in 2010 as I've discovered from this cheeky lil code snippet

SELECT * FROM `film` WHERE `release_year` = 2010;

--   19 Find the titles of all the horror movies.

SELECT `title` FROM `film` WHERE `film_id` IN (
SELECT `film_id` FROM `film_category` WHERE `category_id` = (SELECT `category_id` FROM `category` WHERE `name` = 'horror'));

 --  20 List the full name of the staff member with the ID of 2.
 
 SELECT `first_name`, `last_name` FROM `staff` WHERE `staff_id` = 2;
 
--   21 List all the movies that Fred Costner has appeared in.

SELECT `title` FROM `film` WHERE `film_id` = (
SELECT `film_id` FROM `film_actor` WHERE `actor_id` = (SELECT `actor_id` FROM `actor` WHERE `last_name` = 'Costner'));

--   22 How many distinct countries are there?

SELECT DISTINCT COUNT(`country_id`) AS `number_of_distinct_countries` FROM `country`;

--   23 List the name of every language in reverse-alphabetical order.

SELECT `name` FROM `language` ORDER BY `name` DESC;

 --  24 List the full names of every actor whose surname ends with '-son' in alphabetical order by their forename.
 
 SELECT `first_name`, `last_name` FROM `actor` WHERE `last_name` LIKE '%son' ORDER BY `first_name` ASC;
 
 --  25 Which category contains the most films?

SELECT `category_id`, `name` FROM `category` WHERE `category_id` = ( 
SELECT `category_id` FROM `film_category` GROUP BY `category_id` ORDER BY `category_id` DESC LIMIT 1);
